package com.uttkarsh.InstaStudio.utils.image

import android.content.Context
import android.graphics.Bitmap
import android.graphics.BitmapFactory
import android.net.Uri
import android.util.Base64
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import java.io.ByteArrayOutputStream
import java.io.InputStream
import android.util.Log // Added for logging

object ImageUtils{

    private const val TAG = "ImageUtils" // For logging

    suspend fun uriToBase64(context: Context, imageUri: Uri): String? = withContext(Dispatchers.IO) {
        try {
            // 1. Check if the URI is valid and content can be opened
            Log.d(TAG, "Attempting to convert URI: $imageUri")
            val inputStream: InputStream? = context.contentResolver.openInputStream(imageUri)

            if (inputStream == null) {
                Log.e(TAG, "ContentResolver returned null InputStream for URI: $imageUri")
                return@withContext null
            }

            // Using .use ensures the InputStream is closed automatically
            inputStream.use { stream ->
                // 2. Decode the stream into a Bitmap
                val bitmap = BitmapFactory.decodeStream(stream)
                if (bitmap == null) {
                    Log.e(TAG, "BitmapFactory.decodeStream returned null. The URI might not point to a valid image, or the image format is unsupported, or out of memory. URI: $imageUri")
                    return@withContext null
                }
                Log.d(TAG, "Bitmap decoded successfully. Width: ${bitmap.width}, Height: ${bitmap.height}")

                // 3. Compress the Bitmap into a byte array (PNG format)
                val outputStream = ByteArrayOutputStream()
                // PNG is lossless. Quality '100' is for PNG (ignored but good practice to set).
                val success = bitmap.compress(Bitmap.CompressFormat.PNG, 100, outputStream)
                if (!success) {
                    Log.e(TAG, "Bitmap.compress returned false. Failed to compress bitmap.")
                    return@withContext null // Failed to compress
                }
                val byteArray = outputStream.toByteArray()
                Log.d(TAG, "Bitmap compressed to ByteArray. Size: ${byteArray.size} bytes.")

                // 4. Encode the byte array to a Base64 string
                // Base64.NO_WRAP is generally correct for sending in JSON
                val base64String = Base64.encodeToString(byteArray, Base64.NO_WRAP)
                Log.d(TAG, "Base64 encoding complete. String length: ${base64String.length}.")
                // Log only the first few characters to avoid flooding Logcat if the string is huge
                Log.d(TAG, "Base64 string (first 100 chars): ${base64String.take(100)}")

                // 5. Sanity Check: Try to decode it immediately (optional, for debugging)
                // This step is for local verification, you might remove it in production
                try {
                    val decodedTest = Base64.decode(base64String, Base64.NO_WRAP)
                    Log.d(TAG, "Local Base64 decode test successful. Decoded byte array size: ${decodedTest.size}")
                    if (!byteArray.contentEquals(decodedTest)) {
                        Log.e(TAG, "CRITICAL: Local decode test failed! Original byte array and decoded byte array do not match.")
                        // This would indicate a serious issue in the Base64 encoding/decoding itself or memory corruption.
                    }
                } catch (e: IllegalArgumentException) {
                    Log.e(TAG, "CRITICAL: Locally generated Base64 string is invalid according to Base64.decode!", e)
                    // If this happens, the string generated by encodeToString is definitely bad.
                    return@withContext null // The string is bad
                }

                base64String
            }
        } catch (e: Exception) {
            // Catch specific exceptions if possible, e.g., IOException, OutOfMemoryError
            Log.e(TAG, "Exception in uriToBase64 for URI: $imageUri", e)
            e.printStackTrace() // Keep this for now during active debugging
            null
        }
    }

    fun base64ToBitmap(base64Str: String): Bitmap? {
        return try {
            val decodedBytes = Base64.decode(base64Str, Base64.NO_WRAP) // Match the encoding flag
            BitmapFactory.decodeByteArray(decodedBytes, 0, decodedBytes.size)
        } catch (e: IllegalArgumentException) {
            Log.e(TAG, "Error decoding Base64 string to Bitmap (in base64ToBitmap)", e)
            null
        }
    }
}